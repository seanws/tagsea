/*******************************************************************************
 * Copyright 2005-2007, CHISEL Group, University of Victoria, Victoria, BC, Canada
 * and IBM Corporation. All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     The Chisel Group, University of Victoria
 *******************************************************************************/
package net.sourceforge.tagsea.parsed.core;

import net.sourceforge.tagsea.core.IWaypointLocator;
import net.sourceforge.tagsea.parsed.parser.IWaypointParser;
import net.sourceforge.tagsea.parsed.parser.IWaypointRefactoring;

/**
 * An interface for supplying parsers for text files to generate waypoints. The platform uses
 * several techniques to discover whether a parser should be used to generate waypoints on a file.
 * First the file names are checked. File names can use either wild-card extensions (e.g., *.xml)
 * or full file names (e.g., plugin.xml). Full paths are not considered and path separators 
 * may not be used in the file names returned. If a file name matches (or if no file names are given),
 * the content type is checked, if it is available. When a file name matches and a content type are
 * supplied, only files that match both the file name and the content type will be considered. If no
 * file names are supplied, then an IParsedWaypointDefinition will match on a file when the content
 * type matches. An IParsedWaypointDefinition is invalid and will not be installed if neither file names
 * nor a content type are supplied.
 * 
 * If more than one IParsedWaypointDefinition matches the criterion, then each IParsedWaypointDefinition
 * is queried to see if it should submit to closer matches. An IParsedWaypointDefinition is a "closer
 * match" in the following scenarios:
 * <ol>
 * <li>It supplies a full file name, when the other IParsedWaypointDefinition supplies only a wild-card
 * match</li>
 * <li>It matches a content type that is "lower" in the content type hierarchy than the other one (i.e.
 * the other content type is a super type of the one returned by this IParsedWaypointDefinition).
 * <li>It supplies both a file name that matches and a content type that matches when the other
 * supplies only one.</li>
 * </ol>
 * 
 * When an IParsedWaypointDefinition "submits" to a better match, it will not be considered during the
 * parse process.
 * @author Del Myers
 *
 */
public interface IParsedWaypointDefinition {
	/**
	 * Returns the kind id for waypoints generated by the parser. The kind is a unique id
	 * for each parsed waypoint definition.
	 * @return the kind id for waypoints generated by the parser. The kind is a unique id
	 * for each parsed waypoint definition.
	 */
	String getKind();
	
	/**
	 * Returns the list of file names/wild cards that match this IParsedWaypointDefinition.
	 * @return the list of file names/wild cards that match this IParsedWaypointDefinition.
	 */
	String[] getFileAssociations();
	
		
	/**
	 * Returns the content type that this definition matches.
	 * @return the content type that this definition matches.
	 */
	String getContentType();
	
	/**
	 * Returns true if this IParsedWaypointDefinition should match content types that are 
	 * sub types of the one returned by getContentType(). False otherwise. The return value
	 * of this method is considered to be immutable. <b>The value
	 * returned must never change between calls</b>
	 * @return true if this IParsedWaypointDefinition should match content types that are 
	 * sub types of the one returned by getContentType(). False otherwise.
	 */
	boolean matchSubContentTypes();
	

	
	/**
	 * Returns the parser that will be used to generate waypoints and errors.
	 * @return the parser that will be used to generate waypoints and errors.
	 */
	IWaypointParser getParser();
	
	
	/**
	 * Returns the object that will be used to present the waypoints of this kind in the UI.
	 * @return the object that will be used to present the waypoints of this kind in the UI.
	 */
	IParsedWaypointPresentation getPresentation();
	
	/**
	 * Sets the presentation object to the given presentation.
	 * @param presentation the new presentation.
	 */
	void setPresentation(IParsedWaypointPresentation presentation);

	/**
	 * Returns a human-readable name for the waypoint kind.
	 * @return a human-readable name for the waypoint kind.
	 */
	String getName();
	
	/**
	 * Returns an interface that can be used to change the text representation of waypoints.
	 * @return the refactoring method.
	 */
	IWaypointRefactoring getRefactoringMethod();

	/**
	 * Returns an optional waypoint locator for this definition. Clients may return null to use the
	 * default locator.
	 * @return an optional waypoint locator for this definition.
	 */
	IWaypointLocator getLocator();

}
